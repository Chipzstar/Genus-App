// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

enum CareerInterestSlug {
  law
  tech
  consulting
  banking_finance
}

model CareerInterest {
  id    Int                @id @default(autoincrement())
  slug  CareerInterestSlug @unique
  users User[]
}

model Comment {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  commentId String     @unique
  content   String
  author    User       @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  group     Group      @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId   String
  thread    Thread     @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  threadId  String
  reactions Reaction[]

  @@index([authorId, threadId, groupId])
}

model Group {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  groupId   String      @unique
  slug      String      @unique
  name      String
  members   GroupUser[]
  messages  Message[]
  Comment   Comment[]
  Thread    Thread[]
}

enum GroupRole {
  ADMIN
  EXPERT
  MEMBER
}

model GroupUser {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId    String
  firstname String?
  lastname  String?
  imageUrl  String?
  group     Group     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId   String
  role      GroupRole @default(MEMBER)

  @@index([userId, groupId])
}

enum MessageType {
  NORMAL
  EVENT
  ANNOUNCEMENT
}

model Message {
  id        Int         @id @default(autoincrement())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  messageId String      @unique
  type      MessageType @default(NORMAL)
  author    User        @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  group     Group       @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId   String
  thread    Thread?
  reactions Reaction[]

  @@index([authorId, groupId])
}

model Reaction {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reactionId String   @unique
  emoji      String
  code       String
  author     User     @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId   String
  message    Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId  Int?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  Int?

  @@index([authorId, messageId, commentId])
}

model Thread {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  threadId  String    @unique
  content   String
  author    User      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int       @unique
  group     Group     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId   String
  comments  Comment[]

  @@index([authorId, messageId, groupId])
}

enum ProfileType {
  STUDENT
  ADMIN
  EXPERT
}

enum Gender {
  male
  female
  non_binary
  other
}

model User {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  clerkId           String           @unique
  email             String           @unique
  firstname         String
  lastname          String
  profileType       ProfileType      @default(STUDENT)
  gender            Gender           @default(female)
  completionYear    Int
  broadDegreeCourse String
  university        String
  degreeName        String
  imageKey          String?
  imageUrl          String?
  clerkImageHash    String?
  careerInterests   CareerInterest[]
  messages          Message[]
  threads           Thread[]
  comments          Comment[]
  reactions         Reaction[]
  GroupUser         GroupUser[]
}
