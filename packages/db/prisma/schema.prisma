// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model CareerInterest {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  users User[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String   @unique
  content   String
  author    User     @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  thread    Thread   @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
  threadId  String

  @@index([authorId, threadId])
}

model Group {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  groupId   String      @unique
  slug      String      @unique
  name      String
  members   GroupUser[]
  messages  Message[]
}

enum GroupRole {
  ADMIN
  EXPERT
  MEMBER
}

model GroupUser {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId  String
  email   String    @unique
  group   Group     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId String
  role    GroupRole @default(MEMBER)

  @@index([userId, groupId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String   @unique
  author    User     @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  group     Group    @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId   String
  thread    Thread?

  @@index([authorId, groupId])
}

model Thread {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  threadId  String    @unique
  content   String
  author    User      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId  String
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int       @unique
  comments  Comment[]

  @@index([authorId, messageId])
}

model User {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  clerkId           String           @unique
  email             String           @unique
  firstname         String
  lastname          String
  gender            String?
  completionYear    Int?
  broadDegreeCourse String?
  university        String?
  degreeName        String?
  imageKey          String?
  imageUrl          String?
  careerInterests   CareerInterest[]
  messages          Message[]
  threads           Thread[]
  comments          Comment[]
  GroupUser         GroupUser[]
}
